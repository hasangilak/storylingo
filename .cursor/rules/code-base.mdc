---
description: 
globs: 
alwaysApply: false
---
# Rule: Senior Frontend Engineer Codebase Best Practices

## Purpose
This rule is to be used whenever developing new features or pages. It ensures the codebase maintains high quality, scalability, and maintainability.

## Guidelines
- **Componentization**: Break UI into small, reusable, and composable components. Avoid duplication.
- **Type Safety**: Use TypeScript strictly. Prefer explicit types and interfaces for all props, state, and function signatures.
- **Styling**: Use utility-first CSS (e.g., Tailwind) and keep custom CSS minimal and modular. Prefer CSS-in-JS or CSS modules for component-specific styles.
- **Accessibility**: Ensure all interactive elements are accessible (ARIA, keyboard navigation, color contrast).
- **Performance**: Avoid unnecessary re-renders, use React.memo/useCallback/useMemo where appropriate. Lazy-load heavy components.
- **Testing**: Write unit and integration tests for all components and utilities. Use mocks for API calls.
- **Code Reviews**: All code must be peer-reviewed. Encourage constructive feedback and knowledge sharing.
- **Documentation**: Document complex logic, component usage, and public APIs. Keep README and comments up to date.
- **Error Handling**: Handle errors gracefully in UI and logic. Provide user feedback for failures.
- **Dependency Management**: Keep dependencies up to date. Remove unused packages and code.
- **Security**: Sanitize user input, avoid XSS, and follow secure coding practices.
- **Continuous Improvement**: Regularly refactor and improve code. Encourage adoption of new best practices and tools.

